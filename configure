#!/usr/bin/env bash
# Anticonf (tm) script by Jeroen Ooms (2020)
# Package requires either libv8 6 and up, or legacy branch (3.14 / 3.15).
# If your libv8 is installed in a custom location you need to set
# INCLUDE_DIR and LIB_DIR manually via e.g:
# R CMD INSTALL --configure-vars='INCLUDE_DIR=/.../include LIB_DIR=/.../lib'

PKG_DEB_NAME="libv8-dev or libnode-dev"
PKG_RPM_NAME="v8-devel"
PKG_CSW_NAME="libv8_dev"
PKG_BREW_NAME="v8"
PKG_TEST_HEADER="<v8.h>"
PKG_LIBS="-lv8 -lv8_libplatform"
PKG_CFLAGS="-I/usr/include/v8 -I/usr/include/v8-3.14"

# Find compiler
CXXFLAGS=$(${R_HOME}/bin/R CMD config CXXFLAGS)
LDFLAGS=$(${R_HOME}/bin/R CMD config LDFLAGS)
CXX=$(${R_HOME}/bin/R CMD config CXX11)
PKG_CXX_STD="CXX11"
CXXCPP="$CXX -E"

# Check for custom locations
if [ "$INCLUDE_DIR" ] || [ "$LIB_DIR" ]; then
  echo "Found INCLUDE_DIR and/or LIB_DIR!"
  PKG_CFLAGS="-I$INCLUDE_DIR $PKG_CFLAGS"
  PKG_LIBS="-L$LIB_DIR $PKG_LIBS"
elif [[ "$OSTYPE" == "darwin"* ]]; then
  if [ $(command -v brew) ]; then
    BREWDIR=$(brew --prefix)
  else
    curl -sfL "https://autobrew.github.io/scripts/$PKG_BREW_NAME" > autobrew
    source autobrew
  fi
  V8HOME="$BREWDIR/opt/$PKG_BREW_NAME"
  PKG_CFLAGS="-I${V8HOME}/include -I${V8HOME}/libexec/include"
  PKG_LIBS="-L${V8HOME}/libexec $PKG_LIBS"
fi

# For debugging
echo "Using PKG_CFLAGS=$PKG_CFLAGS"
echo "Using PKG_LIBS=$PKG_LIBS"

# Test for libv8
echo "#include $PKG_TEST_HEADER" | ${CXXCPP} ${CPPFLAGS} ${PKG_CFLAGS} ${CXXFLAGS} -xc++ - >/dev/null 2>configure.log
if [ $? -ne 0 ]; then
  echo "-----------------------------[ ANTICONF ]-------------------------------"
  echo "Configuration failed to find the libv8 engine library. Try installing:"
  echo " * deb: $PKG_DEB_NAME (Debian / Ubuntu)"
  echo " * rpm: $PKG_RPM_NAME (Fedora, EPEL)"
  echo " * brew: $PKG_BREW_NAME (OSX)"
  echo " * csw: $PKG_CSW_NAME (Solaris)"
  echo "To use a custom libv8, set INCLUDE_DIR and LIB_DIR manually via:"
  echo "R CMD INSTALL --configure-vars='INCLUDE_DIR=... LIB_DIR=...'"
  echo "---------------------------[ ERROR MESSAGE ]----------------------------"
  cat configure.log
  echo "------------------------------------------------------------------------"
  exit 1
fi

# Test for legacy libv8 version
${CXXCPP} ${CPPFLAGS} ${PKG_CFLAGS} ${CXXFLAGS} src/legacy/test.cpp >/dev/null 2>&1
if [ $? -eq 0 ]; then
  echo "Found legacy version of libv8"
  PKG_LIBS=$(echo "$PKG_LIBS" | sed -e "s/-lv8_libplatform//")
  sed -e "s|@cflags@|$PKG_CFLAGS|" -e "s|@libs@|$PKG_LIBS|" src/legacy/Makevars.in > src/Makevars
  exit 0
  else
  ${CXX} ${CXXFLAGS} ${PKG_CFLAGS} tools/v8_version.cpp -o v8ver ${LDFLAGS} ${PKG_LIBS}
  v8_version=$(./v8ver)
  rm -rf v8ver
fi

# Test if C++14 is required
if [ $v8_version -ge 807077 ] ; then
  echo "V8 requires C++14"

  CXXFLAGS=$(${R_HOME}/bin/R CMD config CXX14FLAGS)
  LDFLAGS=$(${R_HOME}/bin/R CMD config LDFLAGS)
  CXX=$(${R_HOME}/bin/R CMD config CXX14)
  PKG_CXX_STD="CXX14"
fi

# Test if we need to enable pointer compression (Usually 8.4 and up)
echo "Running feature test for pointer compression..."
${CXX} ${CXXFLAGS} ${PKG_CFLAGS} -DV8_ENABLE_CHECKS tools/test.cpp -o pctest ${LDFLAGS} ${PKG_LIBS}
{ ./pctest; } 2>> configure.log
if [ $? -eq 0 ]; then
  echo "Pointer compression not needed"
  PKG_CFLAGS="$PKG_CFLAGS -DV8_ENABLE_CHECKS"
else
  echo "Enabling pointer compression"
  PKG_CFLAGS="$PKG_CFLAGS -DV8_COMPRESS_POINTERS"
fi
rm -Rf pctest*

# Assume a modern V8 API
sed -e "s|@cflags@|$PKG_CFLAGS|" -e "s|@libs@|$PKG_LIBS|" -e "s|@PKG_CXX_STD@|$PKG_CXX_STD|" src/Makevars.in > src/Makevars
exit 0
